# -*- coding: utf-8 -*-

import base64
import xlrd

from odoo import models, fields, api, _
from odoo.exceptions import except_orm, Warning, RedirectWarning, ValidationError

class ImportFile(models.TransientModel):
    _name = 'lead.import'
    
    files = fields.Binary(
        string='Import Excel File'
    )
    filename  = fields.Char(
        'File Name'
    )
    
    @api.multi
    def import_lead(self):
        crm_obj = self.env['crm.lead']
        country_obj = self.env['res.country']
        state_obj = self.env['res.country.state']
        
        try:
            workbook = xlrd.open_workbook(file_contents=base64.decodestring(self.files))
        except:
            raise ValidationError(_("Please select .xls/xlsx file..."))
            
        Sheet_name = workbook.sheet_names()
        sheet = workbook.sheet_by_name(Sheet_name[0])
        number_of_rows = sheet.nrows
        aList = []
        row = 1
        while(row < number_of_rows):
            crm_name = sheet.cell(row,0).value
            contact_name = sheet.cell(row,1).value
            city = sheet.cell(row,2).value
            email = sheet.cell(row,5).value
            phone = sheet.cell(row,6).value
            fax = sheet.cell(row,7).value

            crm_country = country_obj.search([('name', '=', sheet.cell(row,3).value)])
            state = state_obj.search([('name', '=', sheet.cell(row,4).value)])
            if not state:
                state = False
            else:
                state = state.id
            if not crm_country:
                crm_country = False
            else:
                crm_country = crm_country.id

            #if not state:
            #    raise ValidationError('Invalid state %s'%(sheet.cell(row,4).value))
            #if not crm_country:
            #    raise ValidationError('Invalid country %s'%(sheet.cell(row,3).value))

            row  = row+1
            vals = {
                    'name':crm_name,
                    'contact_name' : contact_name,
                    'city' : city,
                    'country_id': crm_country,
                    'state_id': state,
                    'email_from': email,
                    'phone': phone,
                    'fax':fax,
                    }
            crm_id = crm_obj.create(vals).id
            aList.insert(row-1, crm_id)
        return {
            'type': 'ir.actions.act_window',
            'name': 'Leads',
            'res_model': 'crm.lead',
            'res_id': crm_id,
            'domain': "[('id','in',[" + ','.join(map(str, aList)) + "])]",
            'view_type': 'form',
            'view_mode': 'tree,form',
            'target' : crm_id,
        }
           
# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
